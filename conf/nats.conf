# ========= 基础 =========
server_name: ${SERVER_NAME}
pid_file: "/tmp/${SERVER_NAME}.pid"

jetstream {
  store_dir: "${JS_STORE_DIR}"
  # 按需设置限制
  max_mem_store: 0
  max_file_store: 1TB
}

# ========= 客户端监听（带 TLS） =========
port: ${CLIENT_PORT}
http: 0.0.0.0:${MONITOR_PORT}

tls {
  cert_file: "/etc/nats/certs/server-${SERVER_NAME}.crt"
  key_file:  "/etc/nats/certs/server-${SERVER_NAME}.key"
  ca_file:   "/etc/nats/certs/ca.pem"
  timeout:   2
  # 客户端双向认证（可选）。若使用用户/密码鉴权，可先关闭。
  # verify_and_map: true
}

# ========= 集群路由 =========
cluster {
  name: ${CLUSTER_NAME}
  listen: 0.0.0.0:${CLUSTER_PORT}

  tls {
    cert_file: "/etc/nats/certs/server-${SERVER_NAME}.crt"
    key_file:  "/etc/nats/certs/server-${SERVER_NAME}.key"
    ca_file:   "/etc/nats/certs/ca.pem"
    timeout: 2
  }

  # 广播该节点的地址给集群（用于跨主机/负载）
  advertise: ${ADVERTISE_HOST}:${CLUSTER_PORT}

  routes: [
    ${ROUTES}
  ]
}

# ========= 鉴权（生产可迁移至 JWT/NKey） =========
# 简洁示例：一个只读用户、一个读写用户。请替换为自己的密码，并用强口令管理工具维护。
authorization {
  users = [
    { user: "im_readonly",  password: "CHANGE_ME_STRONG_RO",  permissions: { publish: ["_INBOX.>"], subscribe: [">"] } }
    { user: "im_service",   password: "CHANGE_ME_STRONG_RW",  permissions: { publish: [">"],      subscribe: [">"] } }
  ]
  # 可选：默认拒绝策略
  no_auth_user: ""
  timeout:  3
}

# ========= 访问控制示例（按需细化） =========
# 进一步细化可以用 "accounts" 和 "permissions" 做 subject 级 ACL。
# 本简版以 users.permissions 演示。生产建议：拆分微服务用户 + 机器人用户的最小权限。

# ========= 监控/健康检查 =========
# /healthz /varz /jsz /connz /subz /routez
# 建议在入口层（LB/反向代理）限制可访问 IP。